var forge = require('node-forge');

// Returns SHA1-digest (160 bits) of message
// The output is a strings with the hex-encoded digest.
//
exports.hash = function hash(message) {
    var md = forge.md.sha1.create()
    md.update(message, 'utf8');
    return md.digest().toHex();
}

// Returns a 160-bit random value (hex-encoded)
//
exports.nonce = function nonce() {
    return forge.util.bytesToHex(forge.random.getBytesSync(20));
}



// Encryption for authenticated symmetric cryptosystem.  (AES in
// GCM mode with 96-bit random IV)
// Arguments should be hex-encoded strings. The result is a
// hex-encoded string as well.
//
exports.symenc = function symenc(key, message) {
    key = forge.util.hexToBytes(key);
    message = forge.util.hexToBytes(message);

    var iv = forge.random.getBytesSync(12); // take a random iv
    var cipher = forge.cipher.createCipher('AES-GCM', key);
    cipher.start({
      iv: iv, // should be a 12-byte binary-encoded string or byte buffer
      tagLength: 128 // optional, defaults to 128 bits
    });
    cipher.update(forge.util.createBuffer(message));
    cipher.finish();
    var enc = cipher.output;
    var tag = cipher.mode.tag; // authentication tag

    // the result ciphertext =  iv | enc | tag
    var c = forge.util.createBuffer();
    c.putBytes(iv);
    c.putBytes(enc.data);
    c.putBytes(tag.data);
    return c.toHex();
}


// Decryption for authenticated symmetric cryptosystem.
// (AES in GCM mode with 96-bit random IV)
// Arguments should be hex-encoded strings. The result is a
// hex-encoded string as well.
//
exports.symdec = function symdec(key, ciphertext) {
    key = forge.util.hexToBytes(key);
    ciphertext = forge.util.createBuffer(forge.util.hexToBytes(ciphertext));

    // split the ciphertext into iv, enc, and tag:
    var iv =  ciphertext.getBytes(12);
    var enc = ciphertext.getBytes(ciphertext.length() - 16);
    var tag = ciphertext.getBytes();

    var decipher = forge.cipher.createDecipher('AES-GCM', key);
    decipher.start({
      iv: iv,
      tagLength: 128, // optional, defaults to 128 bits
      tag: tag // authentication tag from encryption
    });
    decipher.update(forge.util.createBuffer(enc));
    var pass = decipher.finish();
    if(pass) { // decryption succeeded
        return decipher.output.toHex();
    }
    else // decryption failure
        return null;
}

